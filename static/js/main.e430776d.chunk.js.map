{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","style","className","join","type","checked","id","title","onClick","TodoList","props","listStyle","margin","todos","map","key","onToggle","Modal","state","isOpen","setState","this","Component","AddTodo","lazy","Promise","resolve","setTimeout","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","Provider","value","filter","fallback","Loader","onCreate","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e430776d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;\r\n","import React, {useContext} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Context from \"../context\";\r\n\r\nfunction TodoItem({todo, index, onChange}) {\r\n    const {removeTodo} = useContext(Context);\r\n    const classes = [];\r\n\r\n    if (todo.completed) {\r\n        classes.push('done');\r\n    }\r\n\r\n    const styles = {\r\n        li: {\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            padding: '0.5rem, 1rem',\r\n            border: '1px solid #ccc',\r\n            borderRadius: '4px',\r\n            marginBottom: '.5rem',\r\n        },\r\n        input: {marginRight: '1rem'}\r\n    }\r\n\r\n    return (\r\n        <li style={styles.li}>\r\n            <span className={classes.join(' ')}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={todo.completed}\r\n                    style={styles.input}\r\n                    onChange={() => onChange(todo.id)}\r\n                />\r\n                <strong>{index + 1} </strong>\r\n                {todo.title}\r\n            </span>\r\n            <button\r\n                className='rm'\r\n                onClick={() => removeTodo(todo.id)}\r\n            >&times;</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TodoList(props) {\r\n\r\n    const styles = {\r\n        ul: {\r\n            listStyle: 'none',\r\n            margin: 0,\r\n            padding: 0\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ul style={styles.ul}>\r\n            {props.todos.map((todo, index) => {\r\n                return (\r\n                    <TodoItem\r\n                        todo={todo}\r\n                        key={todo.id}\r\n                        index={index}\r\n                        onChange={props.onToggle}\r\n                    />\r\n                )\r\n            })}\r\n        </ul>\r\n    );\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n\r\nexport default () => <div style={{display: 'flex', justifyContent: 'center', margin: '.5rem'}}>\r\n    <div className=\"lds-dual-ring\"></div>\r\n</div>\r\n","import React, {Component} from 'react';\r\nimport './Modal.css';\r\n\r\nclass Modal extends Component {\r\n\r\n    state = {\r\n        isOpen: false,\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <button onClick={() => this.setState({isOpen: true})}>Open modal</button>\r\n\r\n                {this.state.isOpen && (<div className=\"modal\">\r\n                    <div className=\"modal-body\">\r\n                        <h1>Modal title</h1>\r\n                        <p>I am awesome modal!</p>\r\n                        <button onClick={() => this.setState({isOpen: false})}>Close modal</button>\r\n                    </div>\r\n                </div>)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","import React, {lazy, Suspense, useEffect, useState} from 'react';\nimport TodoList from \"./Todo/TodoList\";\nimport Context from \"./context\";\nimport Loader from \"./Loader\";\nimport Modal from \"./Modal/Modal\";\n\nconst AddTodo = lazy(\n    () =>\n        new Promise(resolve => {\n            setTimeout(() => {\n                resolve(import(\"./Todo/AddTodo\"))\n            }, 3000)\n        })\n)\n\nfunction App() {\n\n    const [todos, setTodos] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/todos/?_limit=5')\n            .then(response => response.json())\n            .then(todos => {\n                setTimeout(() => {\n                    setTodos(todos);\n                    setLoading(false);\n                }, 2000);\n            })\n    }, [])\n\n    function toggleTodo(id) {\n        setTodos(todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            })\n        )\n    }\n\n    function removeTodo(id) {\n        setTodos(todos.filter(todo => todo.id !== id));\n    }\n\n    function addTodo(title) {\n        setTodos(todos.concat([{\n            title,\n            id: Date.now(),\n            completed: false,\n        }]));\n    }\n\n    return (\n        <Context.Provider value={{removeTodo}}>\n            <div className='wrapper'>\n                <h1>React tutorial</h1>\n                <Modal/>\n                <Suspense fallback={<Loader/>}>\n                    <AddTodo onCreate={addTodo}/>\n                </Suspense>\n\n                {loading && <Loader/>}\n                {todos.length ? (<TodoList\n                    todos={todos}\n                    onToggle={toggleTodo}\n                />) : (loading ? null : <p>No todos!</p>)}\n            </div>\n        </Context.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}